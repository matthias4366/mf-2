# Generated by Django 2.2.1 on 2019-08-14 10:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FullDayOfEating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('notes', models.TextField(blank=True, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Mealplan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RawIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price_eur_per_reference_amount', models.FloatField(default=0)),
                ('reference_amount_g', models.FloatField(default=100)),
                ('calories_kcal', models.FloatField(blank=True, null=True)),
                ('total_carbohydrates_g', models.FloatField(blank=True, null=True)),
                ('dietary_fiber_g', models.FloatField(blank=True, null=True)),
                ('sugars_g', models.FloatField(blank=True, null=True)),
                ('total_fat_g', models.FloatField(blank=True, null=True)),
                ('saturated_fat_g', models.FloatField(blank=True, null=True)),
                ('monounsaturated_fat_g', models.FloatField(blank=True, null=True)),
                ('polyunsaturated_fat_g', models.FloatField(blank=True, null=True)),
                ('total_trans_fatty_acids_g', models.FloatField(blank=True, null=True)),
                ('total_omega_3_fatty_acids_mg', models.FloatField(blank=True, null=True)),
                ('total_omega_6_fatty_acids_mg', models.FloatField(blank=True, null=True)),
                ('protein_g', models.FloatField(blank=True, null=True)),
                ('vitamin_a_iu', models.FloatField(blank=True, null=True)),
                ('vitamin_c_mg', models.FloatField(blank=True, null=True)),
                ('vitamin_d_iu', models.FloatField(blank=True, null=True)),
                ('vitamin_e_alpha_tocopherol_mg', models.FloatField(blank=True, null=True)),
                ('vitamin_k_mcg', models.FloatField(blank=True, null=True)),
                ('thiamin_mg', models.FloatField(blank=True, null=True)),
                ('riboflavin_mg', models.FloatField(blank=True, null=True)),
                ('niacin_mg', models.FloatField(blank=True, null=True)),
                ('vitamin_b6_mg', models.FloatField(blank=True, null=True)),
                ('folate_mcg', models.FloatField(blank=True, null=True)),
                ('vitamin_b12_mcg', models.FloatField(blank=True, null=True)),
                ('pantothenic_acid_mg', models.FloatField(blank=True, null=True)),
                ('calcium_mg', models.FloatField(blank=True, null=True)),
                ('iron_mg', models.FloatField(blank=True, null=True)),
                ('magnesium_mg', models.FloatField(blank=True, null=True)),
                ('phosphorus_mg', models.FloatField(blank=True, null=True)),
                ('potassium_mg', models.FloatField(blank=True, null=True)),
                ('sodium_mg', models.FloatField(blank=True, null=True)),
                ('zinc_mg', models.FloatField(blank=True, null=True)),
                ('copper_mg', models.FloatField(blank=True, null=True)),
                ('manganese_mg', models.FloatField(blank=True, null=True)),
                ('selenium_mcg', models.FloatField(blank=True, null=True)),
                ('cholesterol_mg', models.FloatField(blank=True, null=True)),
                ('biotin_ug', models.FloatField(blank=True, null=True)),
                ('choline_mg', models.FloatField(blank=True, null=True)),
                ('chloride_g', models.FloatField(blank=True, null=True)),
                ('chromium_ug', models.FloatField(blank=True, null=True)),
                ('iodine_ug', models.FloatField(blank=True, null=True)),
                ('molybdenum_ug', models.FloatField(blank=True, null=True)),
                ('sulfur_g', models.FloatField(blank=True, null=True)),
                ('amount_in_package_g', models.FloatField(blank=True, null=True)),
                ('buy_here_link', models.URLField(blank=True, max_length=1000, null=True)),
                ('source_nutritional_information_link', models.URLField(blank=True, max_length=1000, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpecificIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_amount', models.DecimalField(decimal_places=6, max_digits=20, null=True)),
                ('calculated_amount', models.FloatField(blank=True, null=True)),
                ('base_amount_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('scaling_option', models.CharField(choices=[('FIXED', 'fixed'), ('INDEPENDENT', 'independent'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J'), ('K', 'K'), ('L', 'L'), ('M', 'M'), ('N', 'N'), ('O', 'O'), ('P', 'P'), ('Q', 'Q'), ('R', 'R'), ('S', 'S'), ('T', 'T'), ('U', 'U'), ('V', 'V'), ('W', 'W'), ('X', 'X'), ('Y', 'Y'), ('Z', 'Z')], default='FIXED', max_length=100)),
                ('fulldayofeating', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.FullDayOfEating')),
                ('rawingredient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.RawIngredient')),
            ],
        ),
        migrations.CreateModel(
            name='SpecificFullDayOfEating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fulldayofeating', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.FullDayOfEating')),
                ('mealplan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.Mealplan')),
            ],
        ),
        migrations.CreateModel(
            name='RawIngredient2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('price_per_reference_amount', models.FloatField(default=0)),
                ('currency_of_price_per_reference_amount', models.CharField(choices=[('euro', 'euro')], default='euro', max_length=100)),
                ('amount_in_package', models.FloatField(blank=True, null=True)),
                ('amount_in_package_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('reference_amount', models.FloatField(blank=True, default=100)),
                ('reference_amount_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('calories', models.FloatField(blank=True, null=True)),
                ('calories_unit', models.CharField(choices=[('kcal', 'kcal')], default='kcal', max_length=100)),
                ('carbohydrates', models.FloatField(blank=True, null=True)),
                ('carbohydrates_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('fat_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('protein_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('linoleic_acid', models.FloatField(blank=True, null=True)),
                ('linoleic_acid_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('alpha_linoleic_acid', models.FloatField(blank=True, null=True)),
                ('alpha_linoleic_acid_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('vitamin_a', models.FloatField(blank=True, null=True)),
                ('vitamin_a_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('vitamin_c', models.FloatField(blank=True, null=True)),
                ('vitamin_c_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_d', models.FloatField(blank=True, null=True)),
                ('vitamin_d_unit', models.CharField(choices=[('international units', 'international units')], default='international units', max_length=100)),
                ('vitamin_e', models.FloatField(blank=True, null=True)),
                ('vitamin_e_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_k', models.FloatField(blank=True, null=True)),
                ('vitamin_k_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('thiamin', models.FloatField(blank=True, null=True)),
                ('thiamin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('riboflavin', models.FloatField(blank=True, null=True)),
                ('riboflavin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('niacin', models.FloatField(blank=True, null=True)),
                ('niacin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_b6', models.FloatField(blank=True, null=True)),
                ('vitamin_b6_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('folate', models.FloatField(blank=True, null=True)),
                ('folate_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('vitamin_b12', models.FloatField(blank=True, null=True)),
                ('vitamin_b12_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('pantothenic_acid', models.FloatField(blank=True, null=True)),
                ('pantothenic_acid_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('biotin', models.FloatField(blank=True, null=True)),
                ('biotin_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('choline', models.FloatField(blank=True, null=True)),
                ('choline_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('calcium_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('chromium', models.FloatField(blank=True, null=True)),
                ('chromium_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('coppper', models.FloatField(blank=True, null=True)),
                ('coppper_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('fluoride', models.FloatField(blank=True, null=True)),
                ('fluoride_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('iodine', models.FloatField(blank=True, null=True)),
                ('iodine_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('iron', models.FloatField(blank=True, null=True)),
                ('iron_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('magnesium_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('manganese', models.FloatField(blank=True, null=True)),
                ('manganese_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('molybdenum', models.FloatField(blank=True, null=True)),
                ('molybdenum_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('phosphorus', models.FloatField(blank=True, null=True)),
                ('phosphorus_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('selenium', models.FloatField(blank=True, null=True)),
                ('selenium_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('zinc', models.FloatField(blank=True, null=True)),
                ('zinc_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('potassium_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('sodium_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('chloride', models.FloatField(blank=True, null=True)),
                ('chloride_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('buy_here_link', models.URLField(blank=True, max_length=1000, null=True)),
                ('source_nutritional_information_link', models.URLField(blank=True, max_length=1000, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NutrientProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('calories', models.FloatField(blank=True, null=True)),
                ('calories_unit', models.CharField(choices=[('kcal', 'kcal')], default='kcal', max_length=100)),
                ('carbohydrates', models.FloatField(blank=True, null=True)),
                ('carbohydrates_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('fat_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('protein_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('linoleic_acid', models.FloatField(blank=True, null=True)),
                ('linoleic_acid_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('alpha_linoleic_acid', models.FloatField(blank=True, null=True)),
                ('alpha_linoleic_acid_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('vitamin_a', models.FloatField(blank=True, null=True)),
                ('vitamin_a_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('vitamin_c', models.FloatField(blank=True, null=True)),
                ('vitamin_c_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_d', models.FloatField(blank=True, null=True)),
                ('vitamin_d_unit', models.CharField(choices=[('international units', 'international units')], default='international units', max_length=100)),
                ('vitamin_e', models.FloatField(blank=True, null=True)),
                ('vitamin_e_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_k', models.FloatField(blank=True, null=True)),
                ('vitamin_k_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('thiamin', models.FloatField(blank=True, null=True)),
                ('thiamin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('riboflavin', models.FloatField(blank=True, null=True)),
                ('riboflavin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('niacin', models.FloatField(blank=True, null=True)),
                ('niacin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_b6', models.FloatField(blank=True, null=True)),
                ('vitamin_b6_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('folate', models.FloatField(blank=True, null=True)),
                ('folate_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('vitamin_b12', models.FloatField(blank=True, null=True)),
                ('vitamin_b12_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('pantothenic_acid', models.FloatField(blank=True, null=True)),
                ('pantothenic_acid_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('biotin', models.FloatField(blank=True, null=True)),
                ('biotin_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('choline', models.FloatField(blank=True, null=True)),
                ('choline_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('calcium_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('chromium', models.FloatField(blank=True, null=True)),
                ('chromium_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('coppper', models.FloatField(blank=True, null=True)),
                ('coppper_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('fluoride', models.FloatField(blank=True, null=True)),
                ('fluoride_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('iodine', models.FloatField(blank=True, null=True)),
                ('iodine_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('iron', models.FloatField(blank=True, null=True)),
                ('iron_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('magnesium_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('manganese', models.FloatField(blank=True, null=True)),
                ('manganese_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('molybdenum', models.FloatField(blank=True, null=True)),
                ('molybdenum_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('phosphorus', models.FloatField(blank=True, null=True)),
                ('phosphorus_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('selenium', models.FloatField(blank=True, null=True)),
                ('selenium_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('zinc', models.FloatField(blank=True, null=True)),
                ('zinc_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('potassium_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('sodium_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('chloride', models.FloatField(blank=True, null=True)),
                ('chloride_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='fulldayofeating',
            name='nutrient_profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='measuredfood.NutrientProfile'),
        ),
    ]
