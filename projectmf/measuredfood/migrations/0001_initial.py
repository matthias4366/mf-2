# Generated by Django 2.2.1 on 2019-12-02 17:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FullDayOfEating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('cooking_instruction', models.TextField(blank=True, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Mealplan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RawIngredient2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('price_per_reference_amount', models.FloatField(blank=True, default=0, null=True)),
                ('currency_of_price_per_reference_amount', models.CharField(choices=[('euro', 'euro')], default='euro', max_length=100)),
                ('amount_in_package', models.FloatField(blank=True, null=True)),
                ('amount_in_package_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('reference_amount', models.FloatField(blank=True, default=100)),
                ('reference_amount_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('is_public', models.BooleanField(default=False)),
                ('imported_from', models.CharField(blank=True, choices=[('manually created by user', 'manually created by user'), ('manually created by matthias', 'manually created by matthias'), ('automatically imported from database xyz', 'automatically imported from database xyz')], default='manually created by user', max_length=100, null=True)),
                ('calories', models.FloatField(blank=True, null=True)),
                ('calories_unit', models.CharField(choices=[('kcal', 'kcal')], default='kcal', max_length=100)),
                ('carbohydrates', models.FloatField(blank=True, null=True)),
                ('carbohydrates_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('fat_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('protein_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('linoleic_acid', models.FloatField(blank=True, null=True)),
                ('linoleic_acid_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('alpha_linoleic_acid', models.FloatField(blank=True, null=True)),
                ('alpha_linoleic_acid_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('vitamin_a', models.FloatField(blank=True, null=True)),
                ('vitamin_a_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('vitamin_c', models.FloatField(blank=True, null=True)),
                ('vitamin_c_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_d', models.FloatField(blank=True, null=True)),
                ('vitamin_d_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('vitamin_e', models.FloatField(blank=True, null=True)),
                ('vitamin_e_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_k', models.FloatField(blank=True, null=True)),
                ('vitamin_k_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('thiamin', models.FloatField(blank=True, null=True)),
                ('thiamin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('riboflavin', models.FloatField(blank=True, null=True)),
                ('riboflavin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('niacin', models.FloatField(blank=True, null=True)),
                ('niacin_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('vitamin_b6', models.FloatField(blank=True, null=True)),
                ('vitamin_b6_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('folate', models.FloatField(blank=True, null=True)),
                ('folate_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('vitamin_b12', models.FloatField(blank=True, null=True)),
                ('vitamin_b12_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('pantothenic_acid', models.FloatField(blank=True, null=True)),
                ('pantothenic_acid_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('biotin', models.FloatField(blank=True, null=True)),
                ('biotin_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('choline', models.FloatField(blank=True, null=True)),
                ('choline_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('calcium_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('chromium', models.FloatField(blank=True, null=True)),
                ('chromium_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('copper', models.FloatField(blank=True, null=True)),
                ('copper_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('fluoride', models.FloatField(blank=True, null=True)),
                ('fluoride_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('iodine', models.FloatField(blank=True, null=True)),
                ('iodine_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('iron', models.FloatField(blank=True, null=True)),
                ('iron_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('magnesium_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('manganese', models.FloatField(blank=True, null=True)),
                ('manganese_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('molybdenum', models.FloatField(blank=True, null=True)),
                ('molybdenum_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('phosphorus', models.FloatField(blank=True, null=True)),
                ('phosphorus_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('selenium', models.FloatField(blank=True, null=True)),
                ('selenium_unit', models.CharField(choices=[('microgram', 'microgram')], default='microgram', max_length=100)),
                ('zinc', models.FloatField(blank=True, null=True)),
                ('zinc_unit', models.CharField(choices=[('milligram', 'milligram')], default='milligram', max_length=100)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('potassium_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('sodium_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('chloride', models.FloatField(blank=True, null=True)),
                ('chloride_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('buy_here_link', models.URLField(blank=True, max_length=1000, null=True)),
                ('source_nutritional_information_link', models.URLField(blank=True, max_length=1000, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'author')},
            },
        ),
        migrations.CreateModel(
            name='SpecificNutrientTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nutrient_target', models.CharField(choices=[('ignore', 'ignore'), ('water', 'water'), ('protein', 'protein'), ('fat_total', 'fat_total'), ('ignore', 'ignore'), ('fiber_total_dietary', 'fiber_total_dietary'), ('starch', 'starch'), ('ignore', 'ignore'), ('calcium', 'calcium'), ('iron', 'iron'), ('magnesium', 'magnesium'), ('phosphorus', 'phosphorus'), ('potassium', 'potassium'), ('zinc', 'zinc'), ('copper', 'copper'), ('manganese', 'manganese'), ('sulfur', 'sulfur'), ('nickel', 'nickel'), ('molybdenum', 'molybdenum'), ('cobalt', 'cobalt'), ('boron', 'boron')], max_length=100, null=True)),
                ('fulldayofeating', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.FullDayOfEating')),
            ],
        ),
        migrations.CreateModel(
            name='SpecificIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_amount', models.DecimalField(decimal_places=6, default=100, max_digits=20)),
                ('calculated_amount', models.FloatField(blank=True, null=True)),
                ('base_amount_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('scaling_option', models.CharField(choices=[('FIXED', 'fixed'), ('INDEPENDENT', 'independent'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J'), ('K', 'K'), ('L', 'L'), ('M', 'M'), ('N', 'N'), ('O', 'O'), ('P', 'P'), ('Q', 'Q'), ('R', 'R'), ('S', 'S'), ('T', 'T'), ('U', 'U'), ('V', 'V'), ('W', 'W'), ('X', 'X'), ('Y', 'Y'), ('Z', 'Z')], default='FIXED', max_length=100)),
                ('fulldayofeating', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.FullDayOfEating')),
                ('rawingredient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.RawIngredient2')),
            ],
        ),
        migrations.CreateModel(
            name='SpecificFullDayOfEating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fulldayofeating', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.FullDayOfEating')),
                ('mealplan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='measuredfood.Mealplan')),
            ],
        ),
        migrations.CreateModel(
            name='NutrientProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('water', models.FloatField(blank=True, null=True)),
                ('water_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('max_water', models.FloatField(blank=True, null=True)),
                ('max_water_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('protein_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('max_protein', models.FloatField(blank=True, null=True)),
                ('max_protein_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('fat_total', models.FloatField(blank=True, null=True)),
                ('fat_total_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('max_fat_total', models.FloatField(blank=True, null=True)),
                ('max_fat_total_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('fiber_total_dietary', models.FloatField(blank=True, null=True)),
                ('fiber_total_dietary_unit', models.CharField(choices=[('g ', 'g ')], default='g ', max_length=100)),
                ('max_fiber_total_dietary', models.FloatField(blank=True, null=True)),
                ('max_fiber_total_dietary_unit', models.CharField(choices=[('g ', 'g ')], default='g ', max_length=100)),
                ('starch', models.FloatField(blank=True, null=True)),
                ('starch_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('max_starch', models.FloatField(blank=True, null=True)),
                ('max_starch_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('calcium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_calcium', models.FloatField(blank=True, null=True)),
                ('max_calcium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('iron', models.FloatField(blank=True, null=True)),
                ('iron_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_iron', models.FloatField(blank=True, null=True)),
                ('max_iron_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('magnesium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_magnesium', models.FloatField(blank=True, null=True)),
                ('max_magnesium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('phosphorus', models.FloatField(blank=True, null=True)),
                ('phosphorus_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_phosphorus', models.FloatField(blank=True, null=True)),
                ('max_phosphorus_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('potassium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_potassium', models.FloatField(blank=True, null=True)),
                ('max_potassium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('zinc', models.FloatField(blank=True, null=True)),
                ('zinc_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_zinc', models.FloatField(blank=True, null=True)),
                ('max_zinc_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('copper', models.FloatField(blank=True, null=True)),
                ('copper_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_copper', models.FloatField(blank=True, null=True)),
                ('max_copper_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('manganese', models.FloatField(blank=True, null=True)),
                ('manganese_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_manganese', models.FloatField(blank=True, null=True)),
                ('max_manganese_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('sulfur', models.FloatField(blank=True, null=True)),
                ('sulfur_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('max_sulfur', models.FloatField(blank=True, null=True)),
                ('max_sulfur_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('nickel', models.FloatField(blank=True, null=True)),
                ('nickel_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('max_nickel', models.FloatField(blank=True, null=True)),
                ('max_nickel_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('molybdenum', models.FloatField(blank=True, null=True)),
                ('molybdenum_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('max_molybdenum', models.FloatField(blank=True, null=True)),
                ('max_molybdenum_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('cobalt', models.FloatField(blank=True, null=True)),
                ('cobalt_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('max_cobalt', models.FloatField(blank=True, null=True)),
                ('max_cobalt_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('boron', models.FloatField(blank=True, null=True)),
                ('boron_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('max_boron', models.FloatField(blank=True, null=True)),
                ('max_boron_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='mealplan',
            name='nutrient_profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='measuredfood.NutrientProfile'),
        ),
        migrations.AddField(
            model_name='fulldayofeating',
            name='nutrient_profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='measuredfood.NutrientProfile'),
        ),
        migrations.CreateModel(
            name='RawIngredient3',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('price_per_reference_amount', models.FloatField(blank=True, default=0, null=True)),
                ('currency_of_price_per_reference_amount', models.CharField(choices=[('euro', 'euro')], default='euro', max_length=100)),
                ('amount_in_package', models.FloatField(blank=True, null=True)),
                ('amount_in_package_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('reference_amount', models.FloatField(blank=True, default=100)),
                ('reference_amount_unit', models.CharField(choices=[('gram', 'gram')], default='gram', max_length=100)),
                ('water', models.FloatField(blank=True, null=True)),
                ('water_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('protein_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('fat_total', models.FloatField(blank=True, null=True)),
                ('fat_total_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('fiber_total_dietary', models.FloatField(blank=True, null=True)),
                ('fiber_total_dietary_unit', models.CharField(choices=[('g ', 'g ')], default='g ', max_length=100)),
                ('starch', models.FloatField(blank=True, null=True)),
                ('starch_unit', models.CharField(choices=[('g', 'g')], default='g', max_length=100)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('calcium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('iron', models.FloatField(blank=True, null=True)),
                ('iron_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('magnesium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('phosphorus', models.FloatField(blank=True, null=True)),
                ('phosphorus_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('potassium_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('zinc', models.FloatField(blank=True, null=True)),
                ('zinc_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('copper', models.FloatField(blank=True, null=True)),
                ('copper_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('manganese', models.FloatField(blank=True, null=True)),
                ('manganese_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('sulfur', models.FloatField(blank=True, null=True)),
                ('sulfur_unit', models.CharField(choices=[('mg', 'mg')], default='mg', max_length=100)),
                ('nickel', models.FloatField(blank=True, null=True)),
                ('nickel_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('molybdenum', models.FloatField(blank=True, null=True)),
                ('molybdenum_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('cobalt', models.FloatField(blank=True, null=True)),
                ('cobalt_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('boron', models.FloatField(blank=True, null=True)),
                ('boron_unit', models.CharField(choices=[('µg', 'µg')], default='µg', max_length=100)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'author')},
            },
        ),
    ]
